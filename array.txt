/************************* array ***************************/
concat()

The concat() method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.

var arr1 = ["a", "b", "c"];
var arr2 = ["d", "e", "f"];

var arr3 = arr1.concat(arr2);

// results in a new array [ "a", "b", "c", "d", "e", "f" ]

concating 3 arrays
===================
var nums = num1.concat(num2, num3);

   [1,2].concat([3,4],[5,6],7,8)
=> [ 1, 2, 3, 4, 5, 6, 7, 8 ]


/*******************************************************/

The includes() method determines whether an array includes a certain element, returning true or false as appropriate.

var a = [1, 2, 3];
a.includes(2); // true 
a.includes(4); // false

/*******************************************************/
The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.

var a = [2, 9, 9]; 
a.indexOf(2); // 0 
a.indexOf(7); // -1

if (a.indexOf(7) === -1) {
  // element doesn't exist in array
}

Finding if an element exists in the array or not and updating the array

/***********************************************************/
The pop() method removes the last element from an array and returns that element. This method changes the length of the array.

var a = [1, 2, 3];
a.pop();

console.log(a); // [1, 2]

/************************************************************/
The shift() method removes the first element from an array and returns that element. This method changes the length of the array.

var a = [1, 2, 3];
a.shift();

console.log(a); // [2, 3]

/************************************************************/
The push() method adds one or more elements to the end of an array and returns the new length of the array.

numbers.push(5, 6, 7);

/************************************************************/
The unshift() method adds one or more elements to the beginning of an array and returns the new length of the array.

var a = [1, 2, 3];
a.unshift(4, 5);

console.log(a); // [4, 5, 1, 2, 3]

/************************************************************/
The reverse() method reverses an array in place. The first array element becomes the last, and the last array element becomes the first.

var a = ['one', 'two', 'three'];
a.reverse(); 

console.log(a); // ['three', 'two', 'one']
console.log(numbers); // [1, 2, 3, 4, 5, 6, 7]

/************************************************************/
The slice() method returns a shallow copy of a portion of an array into a new array object selected from 
begin to end (end not included). The original array will not be modified.

var a = ["zero", "one", "two", "three"];
var sliced = a.slice(1,3);

console.log(a);      // [ "zero", "one", "two", "three" ]
console.log(sliced); // [ "one", "two" ]

/************************************************************/
The sort() method sorts the elements of an array in place and returns the array. The sort is not necessarily stable.
 The default sort order is according to string Unicode code points.
 
 ascending order: 
 function compareNumbers(a, b) {
  return a - b;
}